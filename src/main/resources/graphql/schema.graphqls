"Constraint: String should not be blank"
directive @NotBlank on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Regex pattern validation"
directive @Pattern(regexp : String!) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Not starts with validation"
directive @NotStartsWith(prefix : String!) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

type Query {
    """
    Operation that returns greeting with name.
    If name is not provided, then it is defaulted to 'Spring'
    """
    greeting(name: String! = "Spring" @NotBlank @Pattern(regexp: ".{0,11}") @NotStartsWith(prefix: "boo")): String
}

type Mutation {
    """
    Operation to create book and return the created book.
    """
    createBook(book: CreateBookRequest!): CreateBookResponse
}

interface MutationResponse {
    success: Boolean!
    message: String!
}

input CreateBookRequest {
    id: ID! @NotBlank
    name: String! @NotBlank @Pattern(regexp: ".{0,100}")
    rating: Float
}

type CreateBookResponse implements MutationResponse {
    success: Boolean!
    message: String!
    book: Book
}

type Book {
    id: ID!
    name: String!
    rating: Float
    authors: [Author!]!
}

type Author {
    id: ID!
    name: String!
}