"Constraint: String should not be blank"
directive @NotBlank on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Regex pattern validation"
directive @Pattern(regexp : String!) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Not starts with validation"
directive @NotStartsWith(prefix : String!) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Maximum value"
directive @Max(value : Int! = 2147483647) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

"Constraint: Positive value"
directive @Positive on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

scalar DateTime @specifiedBy(url: "https://scalars.graphql.org/andimarek/date-time.html")

"String value matching regex ISBN-[0-9]{4}-[0-9]{2}-[0-9]{2}-[0-9]+"
scalar ISBN

type Query {
    """
    Operation that returns greeting with name.
    If name is not provided, then it is defaulted to 'Spring'
    """
    greeting(name: String! = "Spring" @NotBlank @Pattern(regexp: ".{0,11}") @NotStartsWith(prefix: "boo")): String

    """
    Operation to list books
    """
    listBooks(bookIds: [String!]!): [Book!]!

    """
    Operation to list books
    """
    listAuthors(authorIds: [String!]!): [Author!]!
}

type Mutation {
    """
    Operation to create book and return the created book.
    bookInput: mutation payload
    """
    createBook(bookInput: BookInput!): CreateBookResponse
    """
    Operation to create author and return the created author.
    authorInput: mutation payload
    """
    createAuthor(authorInput: AuthorInput!): CreateAuthorResponse
    """
    Operation to associate book and author and return the created book and author.
    """
    associateBookAndAuthor(bookId: String!, authorId: String!): CreateBookAuthorResponse
    """
    Operation to create and associate book and author and return the created book and author.
    """
    createBookWithAuthor(bookInput: BookInput!, authorInput: AuthorInput!): CreateBookAuthorResponse
}

interface MutationResponse {
    success: Boolean!
    message: String!
}

input BookInput {
    id: ID! @NotBlank
    name: String! @NotBlank @Pattern(regexp: ".{0,100}")
    rating: Float
    publishedDateTime: DateTime
    isbn: ISBN!
}

input AuthorInput {
    id: ID! @NotBlank
    name: String! @NotBlank @Pattern(regexp: ".{0,100}")
}

type CreateBookResponse implements MutationResponse {
    success: Boolean!
    message: String!
    book: Book
}

type CreateAuthorResponse implements MutationResponse {
    success: Boolean!
    message: String!
    author: Author
}

type CreateBookAuthorResponse implements MutationResponse {
    success: Boolean!
    message: String!
    book: Book
    author: Author
}

type Book {
    id: ID!
    name: String!
    rating: Float
    publishedDateTime: DateTime
    isbn: ISBN!
    authors(limit: Int! = 5 @Positive @Max(value : 100)): [Author!]!
}

type Author {
    id: ID!
    name: String!
    books: [Book!]!
}